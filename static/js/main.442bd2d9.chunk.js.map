{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","_ref","movie","_jsxs","className","children","_jsx","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","_ref$label","label","_ref$placeholder","placeholder","concat","_ref$required","required","_ref$onChange","onChange","_ref$isValid","isValid","_useState","useState","Math","random","toFixed","slice","id","_slicedToArray","_useState3","_useState4","touched","setTouched","hasErrorRequired","hasErrorNoValid","hasError","htmlFor","type","classNames","event","target","onBlur","initialInput","NewMovie","onAdd","_useState2","count","setCount","newMovie","setNewMovie","pattern","handleChange","field","_objectSpread","_defineProperty","trimStart","isValidImdbUrl","match","isValidImgUrl","isDisabled","onSubmit","preventDefault","currentCount","disabled","App","moviesFromServer","setMovies","prevMovies","_toConsumableArray","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.442bd2d9.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  placeholder?: string,\n  required?: boolean,\n  onChange?: (event: string) => void,\n  isValid?: boolean,\n};\n\nfunction getRandomDigits() {\n  return Math.random()\n    .toFixed(16)\n    .slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  placeholder = `Enter ${label}`,\n  required = false,\n  onChange = () => {},\n  isValid = false,\n}) => {\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  const [touched, setTouched] = useState(false);\n  const hasErrorRequired = touched && required && !value;\n  const hasErrorNoValid = !hasErrorRequired && isValid && touched;\n  const hasError = hasErrorRequired || hasErrorNoValid;\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          type=\"text\"\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          placeholder={placeholder}\n          value={value}\n          onChange={event => onChange(event.target.value)}\n          onBlur={() => setTouched(true)}\n        />\n      </div>\n\n      {hasErrorRequired && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n\n      {hasErrorNoValid && (\n        <p className=\"help is-danger\">{`Please enter valid URL for ${label}`}</p>\n      )}\n    </div>\n  );\n};\n","import { useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\nconst initialInput = {\n  title: '',\n  description: '',\n  imgUrl: '',\n  imdbUrl: '',\n  imdbId: '',\n};\n\ntype Props = {\n  onAdd: (movie: Movie) => void;\n};\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  const [count, setCount] = useState(0);\n  const [newMovie, setNewMovie] = useState<Movie>(initialInput);\n\n  const pattern = /^(https?:\\/\\/)?(www\\.)?[A-Za-z\\d.-]+\\.\\w{2,6}\\/?([^\\s]*)?$/;\n\n  const handleChange = (field: string, value: string) => {\n    setNewMovie({ ...newMovie, [field]: value.trimStart() });\n  };\n\n  const isValidImdbUrl = newMovie.imdbUrl.match(pattern);\n  const isValidImgUrl = newMovie.imgUrl.match(pattern);\n\n  const isDisabled = newMovie.title\n    && newMovie.imgUrl && newMovie.imdbUrl\n    && newMovie.imdbId && isValidImdbUrl && isValidImgUrl;\n\n  const reset = () => {\n    setNewMovie(initialInput);\n  };\n\n  const handlSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (!isDisabled) {\n      return;\n    }\n\n    onAdd(newMovie);\n    setCount((currentCount) => currentCount + 1);\n    reset();\n  };\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={handlSubmit}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={newMovie.title}\n        onChange={(event) => handleChange('title', event)}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={newMovie.description}\n        onChange={(event) => handleChange('description', event)}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={newMovie.imgUrl}\n        onChange={(event) => handleChange('imgUrl', event)}\n        isValid={!isValidImgUrl}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={newMovie.imdbUrl}\n        onChange={(event) => handleChange('imdbUrl', event)}\n        isValid={!isValidImdbUrl}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={newMovie.imdbId}\n        onChange={(event) => handleChange('imdbId', event)}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={!isDisabled}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import './App.scss';\nimport { useState } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>(moviesFromServer);\n\n  const addMovie = (movie: Movie): void => {\n    setMovies((prevMovies: Movie[]) => [...prevMovies, movie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={addMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}